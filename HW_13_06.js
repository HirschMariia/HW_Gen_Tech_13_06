// 1. Вывести названия двух произвольных треков с тегом mega

db.videos.aggregate([
    {
        $match: { tags: 'mega' }
    },
    {
        $sample: { size: 2 }
    },
    {
        $project: { title: 1, _id: 0 }
    }
])

// 2. Вывести имя юзера с самым минимальным балансом

db.users.aggregate([
    {
        $sort: { balance: 1 }
    },
    {
        $limit: 1
    },
    {
        $project: { fullname: 1, _id: 0 }
    }
])

// 3. Используя метод countDocuments(), вывести ко-во заблокированных юзеров с балансом от 10 до 1000 EUR (вкл.)

db.users.countDocuments(
    {
        is_blocked: true,
        balance: { $gte: 10, $lte: 1000 }
    }
)

// 4. Используя метод aggregate(), вывести ко-во незаблокированных юзеров не из Germany и не из France с балансом до 1000 EUR (не вкл.)

db.users.aggregate([
    {
        $match: {
            is_blocked: { $ne: true },
            country: { $nin: ['Germany', 'France'] },
            balance: { $lt: 1000 }
        }
    },
    { $count: 'count' }
])

//5. Также очень коротко опишите, как работает агрегация в MongoDB

//Агрегация в MongoDB — это процесс обработки данных из коллекции и возврата вычисленных результатов. Основные особенности агрегации включают:
//1.Pipeline (Конвейер): Агрегация использует конвейер, состоящий из последовательности стадий (этапов), где каждый этап обрабатывает входные данные и передает результат на следующий этап.
//2.Stages (Этапы): Каждая стадия выполняет специфическую операцию:
//$match,$group,$project,$sort,$limit и $skip,$sample,$count
//3.Производительность: Конвейер агрегации позволяет эффективно обрабатывать большие объемы данных с использованием индексов и параллельной обработки.
//4.Выходные данные: Результатом агрегации может быть множество документов, содержащих агрегированные данные, которые могут быть использованы для отчетности, анализа и других целей.

